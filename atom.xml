<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[神羲龛]]></title>
  <link href="http://lieyunye.github.io/atom.xml" rel="self"/>
  <link href="http://lieyunye.github.io/"/>
  <updated>2013-11-29T13:50:11+08:00</updated>
  <id>http://lieyunye.github.io/</id>
  <author>
    <name><![CDATA[lieyunye]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在IOS应用中使用字体图标]]></title>
    <link href="http://lieyunye.github.io/blog/2013/10/13/ios-font-icon/"/>
    <updated>2013-10-13T22:39:00+08:00</updated>
    <id>http://lieyunye.github.io/blog/2013/10/13/ios-font-icon</id>
    <content type="html"><![CDATA[<p>做IOS开发的都知道，因为屏幕分辨率的问题，在ios app 中都得放两套切图来支持retina屏和非retina屏幕，但是文字就不需要考虑分辨率的问题，所以可不可以将一些图片用文字来代替呢，省时省力省资源。看下面一些截图：</p>

<p>   <img src="http://lieyunye.github.io/images/font-icon-4.png"></p>

<p>   <img src="http://lieyunye.github.io/images/font-icon-5.png"></p>

<p>   <img src="http://lieyunye.github.io/images/font-icon-6.png"></p>

<p>   <img src="http://lieyunye.github.io/images/font-icon-7.png"></p>

<p>   <img src="http://lieyunye.github.io/images/font-icon-8.png"></p>

<p>   <img src="http://lieyunye.github.io/images/font-icon-9.png"></p>

<p>   <img src="http://lieyunye.github.io/images/font-icon-10.png"></p>

<p>   <img src="http://lieyunye.github.io/images/font-icon-11.png"></p>

<p>这些截图上面的图标都是用文字来表示的，没有用png图片，看起来还不错吧</p>

<p>下面介绍一下制作以及使用图标字体的方法</p>

<h1>字体图标的制作</h1>

<p>这部分分两个步骤：1、字形图标的制作 2、字体库的制作</p>

<h3>一、字形图标的制作</h3>

<p>   安装一个工具Illustrator，这个工具有破解版，自行搜寻下载</p>

<p>   使用其中的钢笔工具绘制字形图标，比如绘制一个新浪微博logo和垃圾桶，如图：</p>

<p>   新浪微博logo</p>

<p>   <img src="http://lieyunye.github.io/images/font-icon-2.png"></p>

<p>   垃圾桶</p>

<p>   <img src="http://lieyunye.github.io/images/font-icon-3.png"></p>

<p>   好了，绘制完字形图标，接下来做字体库</p>

<h3>二、字体库的制作</h3>

<p>   安装FontLab Studio，这个工具可以生成字体库
   new&mdash;>generate font,生成.ttf文件，打开该ttf文件，选中一个字形，打开，然后将做好的字形图标从Illustrator中copy过来，这里有个尺寸问题，可以参看这篇文章<a href="http://www.webjx.com/illustrator/ai-20782_3.html">Illustrator+FontLab进行字体设计教程</a>
   保存，ok。</p>

<h1>字体图标的使用</h1>

<p>将制作好的字体库copy到工程中，在IOS工程中配置一下，打开appName-Info.plist,添加属性Fonts provided by application，如图：</p>

<p><img src="http://lieyunye.github.io/images/font-icon-1.png"></p>

<p>因为字体图标也是字体，所以使用和普通的字体没区别：看代码就知道了</p>

<pre><code>StrokeLabel *cameraLabel = [[StrokeLabel alloc] initWithFrame:CGRectMake(175, headerImageView.frame.origin.y + 70, 54, 46) LineWidth:5 TextColor:[UIColor whiteColor]];
cameraLabel.text = @"C";
cameraLabel.textAlignment = NSTextAlignmentCenter;
cameraLabel.textColor= [UIColor colorWithHexString:@"#8dc63f"];
cameraLabel.backgroundColor = [UIColor clearColor];
cameraLabel.font = [UIFont fontWithName:FONT_99FANGICON size:35];
[scrollView addSubview:cameraLabel];
[cameraLabel release];
</code></pre>

<p>这段代码展示一个相机图标</p>

<p>   <img src="http://lieyunye.github.io/images/font-icon-12.png"></p>

<p><a href="https://github.com/lieyunye/font-icon">Demo</a></p>

<p>大家有兴趣的话，可以在项目中使用，IOS项目和Android项目都可以运用，十分方便，到此为止吧</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解析IOS崩溃日志(crash log)]]></title>
    <link href="http://lieyunye.github.io/blog/2013/09/10/how-to-analyse-ios-crash-log/"/>
    <updated>2013-09-10T13:51:00+08:00</updated>
    <id>http://lieyunye.github.io/blog/2013/09/10/how-to-analyse-ios-crash-log</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;最近在解析umeng错误分析日志上有了重大突破！</p>

<p>&emsp;&emsp;很显然，我们的应用免不了crash，各种各样的crash，不过大部分在提交至appstore前经过严格的“消毒”后，所剩无几了。but（这个词..）漏网之鱼总是有的嘛（貌似很多..囧）。好吧，看下文：</p>

<p>&emsp;&emsp;首先看一些这些线上app crash 信息：</p>

<pre><code>* Application received signal SIGSEGV
* Application received signal SIGBUS
* -[__NSArrayM objectAtIndex:]: index 4294967295 beyond bounds for empty array
* -[JKArray objectAtIndex:]: index (0) beyond bounds (0)
</code></pre>

<p>SIGSEGV和SIGBUS一般是因为访问已被释放的内存或者调用不存在的方法导致的，余下两个就是数组越界的问题了
这些你都知道的，然后来看看具体的log信息：</p>

<p>Application received signal SIGSEGV</p>

<pre><code>Application received signal SIGSEGV
(null)
(
0   CoreFoundation                      0x32f1c3ff  + 186
1   libobjc.A.dylib                     0x3ac17963 objc_exception_throw + 30
2   CoreFoundation                      0x32f1c307  + 106
3   appname                            0x14e1e1 appname + 1364449
4   libsystem_c.dylib                   0x3b08bd33 _sigtramp + 34
5   appname                            0x97525 appname + 615717
6   CoreFoundation                      0x32e6d349 _CFXNotificationPost + 1420
7   Foundation                          0x337879cd  + 168
8   Foundation                          0x337876c1  + 136
9   appname                            0x96f2f appname + 614191
10  Foundation                          0x33858915  + 16
11  Foundation                          0x33798769  + 200
12  Foundation                          0x33798685  + 60
13  CFNetwork                           0x32bf964f  + 26
14  CFNetwork                           0x32bf8d33  + 54
15  CFNetwork                           0x32c21013  + 18
16  CoreFoundation                      0x32e62acd CFArrayApplyFunction + 176
17  CFNetwork                           0x32c21473  + 74
18  CFNetwork                           0x32b85461  + 188
19  CoreFoundation                      0x32ef18f7  + 14
20  CoreFoundation                      0x32ef115d  + 212
21  CoreFoundation                      0x32eeff2f  + 646
22  CoreFoundation                      0x32e6323d CFRunLoopRunSpecific + 356
23  CoreFoundation                      0x32e630c9 CFRunLoopRunInMode + 104
24  GraphicsServices                    0x36a4233b GSEventRunModal + 74
25  UIKit                               0x34d7f2b9 UIApplicationMain + 1120
26  appname                            0xf3df appname + 58335
27  appname                            0x3578 appname + 9592
)

dSYM UUID: 365EF56E-D598-3B94-AD36-BFA13772A4E3
CPU Type: armv7s
Slide Address: 0x00001000
Binary Image: appname
Base Address: 0x000f7000
</code></pre>

<p>&ndash;[__NSArrayM objectAtIndex:]: index 4294967295 beyond bounds for empty array</p>

<pre><code>*** -[__NSArrayM objectAtIndex:]: index 4294967295 beyond bounds for empty array
(null)
(
0   CoreFoundation                      0x330dc3ff  + 186
1   libobjc.A.dylib                     0x3add7963 objc_exception_throw + 30
2   CoreFoundation                      0x33027ef9  + 164
3   appname                            0xcbcaf appname + 830639
4   appname                            0x40bc1 appname + 261057
5   appname                            0x3d297 appname + 246423
6   UIKit                               0x34f36569  + 408
7   UIKit                               0x34f1b391  + 1316
8   UIKit                               0x34f32827  + 206
9   UIKit                               0x34eee8c7  + 258
10  QuartzCore                          0x34c9a513  + 214
11  QuartzCore                          0x34c9a0b5  + 460
12  QuartzCore                          0x34c9afd9  + 16
13  QuartzCore                          0x34c9a9c3  + 238
14  QuartzCore                          0x34c9a7d5  + 316
15  QuartzCore                          0x34c9a639  + 60
16  CoreFoundation                      0x330b1941  + 20
17  CoreFoundation                      0x330afc39  + 276
18  CoreFoundation                      0x330aff93  + 746
19  CoreFoundation                      0x3302323d CFRunLoopRunSpecific + 356
20  CoreFoundation                      0x330230c9 CFRunLoopRunInMode + 104
21  GraphicsServices                    0x36c0233b GSEventRunModal + 74
22  UIKit                               0x34f3f2b9 UIApplicationMain + 1120
23  appname                            0xf3df appname + 58335
24  appname                            0x3578 appname + 9592
)

dSYM UUID: 365EF56E-D598-3B94-AD36-BFA13772A4E3
CPU Type: armv7s
Slide Address: 0x00001000
Binary Image: appname
Base Address: 0x000c3000
</code></pre>

<p>好了，相信你也看出来了，这些具体的crash log 什么都看不出来，都是一些内存地址，帧调用栈等，所以需要进一步的解析，看下文：</p>

<p>看一下上面的crash log，找到一句</p>

<pre><code>5   appname                            0x97525 appname + 615717
</code></pre>

<p>它指出了应用名称，崩溃时的调用方法的地址，文件的地址以及方法所在的行的位置（<a href="http://www.raywenderlich.com/zh-hans/30818/ios%E5%BA%94%E7%94%A8%E5%B4%A9%E6%BA%83%E6%97%A5%E5%BF%97%E6%8F%AD%E7%A7%98">具体请看这篇文章</a>），接下来就要符号化（Symbolication）这句,用dwarfdump来检测crash log中dSYM UUID和本地的dSYM文件是否匹配</p>

<p>打开终端：</p>

<pre><code>cd /Users/username/Library/Developer/Xcode/Archives/2013-08-30/app 8-30-13 6.19 PM.xcarchive/dSYMs
dwarfdump --uuid appname.app.dSYM
UUID: 9F0AEFA6-4349-30AF-8420-BCEE739DA0B4 (armv7) appname.app.dSYM/Contents/Resources/DWARF/appname
UUID: 365EF56E-D598-3B94-AD36-BFA13772A4E3 (armv7s) appname.app.dSYM/Contents/Resources/DWARF/appname
</code></pre>

<p>OK,crash log中的dSYM UUID与本地的dYSM文件是相匹配的。好接下来就查一下0x97525这个地址是什么，</p>

<pre><code>dwarfdump --arch=armv7 --lookup 0x97525  /Users/username/Library/Developer/Xcode/Archives/2013-08-30/appname\ 8-30-13\ 6.19\ PM.xcarchive/dSYMs/appname.app.dSYM/Contents/Resources/DWARF/appname
</code></pre>

<p>得到的结果：</p>

<pre><code>----------------------------------------------------------------------
File: /Users/username/Library/Developer/Xcode/  Archives/2013-08-30/appname 8-30-13 6.19    PM.xcarchive/dSYMs/appname.app.dSYM/Contents/   Resources/DWARF/appname (armv7)
----------------------------------------------------------------------
Looking up address: 0x0000000000097525 in .debug_info... found!

0x00359c67: Compile Unit: length = 0x000066f1  version = 0x0002  abbr_offset = 0x00000000  addr_size = 0x04  (next CU at 0x0036035c)

0x00359c72: TAG_compile_unit [1] *
         AT_producer( "Apple LLVM version 4.2 (clang-425.0.28) (based on LLVM 3.2svn)" )
         AT_language( DW_LANG_ObjC )
         AT_name( "xxx/EGOImageView.m" )
         AT_low_pc( 0x0009710c )
         AT_stmt_list( 0x000655c1 )
         AT_comp_dir( "xxx" )
         AT_APPLE_optimized( 0x01 )
         AT_APPLE_major_runtime_vers( 0x02 )

0x00359e57:     TAG_subprogram [10] *
             AT_name( "-[EGOImageView imageLoaderDidFailToLoad:]" )
             AT_decl_file( "xxx/EGOImageView.m" )
             AT_decl_line( 96 )
             AT_prototyped( 0x01 )
             AT_APPLE_isa( 0x01 )
             AT_low_pc( 0x00097490 )
             AT_high_pc( 0x00097572 )
             AT_frame_base( r7 )
             AT_object_pointer( {0x00359e6e} )
Line table dir : 'xxx'
Line table file: 'EGOImageView.m' line 99, column 2 with start address 0x00000000000974fe

Looking up address: 0x0000000000097525 in .debug_frame... found!

0x0000c620: FDE
    length: 0x0000000c
    CIE_pointer: 0x00000000
    start_addr: 0x00097490 -[EGOImageView imageLoaderDidFailToLoad:]
range_size: 0x000000e2 (end_addr = 0x00097572)
Instructions: 0x00097490: CFA=4294967295+4294967295
</code></pre>

<p>看一下结果：发现有AT_name、Line table dir :、Line table file:，aha!找到了出错的地方（出错的这个文件是网上别人写的，有bug，现已不再使用）。</p>

<h3>注意：如果发现warning: unsupported file type:错误，这个问题是因为有文件或者目录的名称中包含空格，比如：2013-08-30/appname 8-30-13 6.19 ，所以，需要转义一下：2013-08-30/appname\ 8-30-13\ 6.19\ PM.xcarchive</h3>

<p>（<a href="http://www.whoslab.me/blog/?cat=24">参看此文章</a>）</p>

<p>OK,希望能有所帮助，到此为止吧</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[本博客的搭建]]></title>
    <link href="http://lieyunye.github.io/blog/2013/09/02/how-to-create-blog-site/"/>
    <updated>2013-09-02T19:44:00+08:00</updated>
    <id>http://lieyunye.github.io/blog/2013/09/02/how-to-create-blog-site</id>
    <content type="html"><![CDATA[<p>如果有人对git-hub + octopress的博客感兴趣的话，可以读一读下文：</p>

<p>1、首先读一下以下三个链接的文章</p>

<ul>
<li><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">象写程序一样写博客：搭建基于github的博客</a> @唐巧</li>
<li><a href="http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/">利用Octopress搭建一个Github博客</a> @破船(BeyondVincent)</li>
<li><a href="http://huanggang.me/archives/654">在github上使用octopress</a></li>
</ul>


<p>2、顺利的话，相信你已经搭建成功了，如果出了问题，可以看看下文，梳理一下：</p>

<ul>
<li><p>git</p>

<p>将git安装好，有git-hub的账号,对git做一些基本配置，比如:remote.origin.url = <a href="https://github.com/username/username.github.com.git">https://github.com/username/username.github.com.git</a> ， 这样git push origin source 才不会出错</p></li>
<li><p>安装ruby和rvm</p>

<p>记得安装好相关依赖项，如 bundle</p></li>
<li><p>安装octopress</p>

<p>生成博客或者是对octopress设置 都要记得 cd your_local_octopress_directory</p></li>
</ul>


<h2>其他配置</h2>

<ul>
<li><p>导航栏的配置</p>

<pre><code>cd source/_includes/custom
&lt;li&gt;&lt;a href="http://lieyunye.github.io/"&gt;首页&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lieyunye.github.io/blog/archives"&gt;所有文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://weibo.com/lieyunye" target="_blank"&gt;我的微博&lt;/a&gt;&lt;/li&gt;
</code></pre></li>
<li><p>关于我</p>

<pre><code>cd octopress/source/_includes/custom/asides
&lt;h1&gt;About Me&lt;/h1&gt;
&lt;p&gt;爱帮网(2011---2012)&lt;br/&gt;
   九九房(2012---至今)&lt;/p&gt;
&lt;br/&gt;Java 开发工程师，曾开发爱帮生活、爱帮公交后台
&lt;br/&gt;IOS 开发工程师，曾开发爱帮生活、掌上租房、找室友
&lt;br/&gt;
&lt;br/&gt;新浪微博：&lt;a href='http://weibo.com/lieyunye' target='_blank'&gt;裂云&gt;野&lt;/a&gt;
&lt;/p&gt;
</code></pre>

<p>参见文档：<a href="http://octopress.org/docs/theme/template">http://octopress.org/docs/theme/template</a></p></li>
</ul>


<p>  OK,这就是本博客的搭建过程，到此为止吧</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[裂云野]]></title>
    <link href="http://lieyunye.github.io/blog/2013/08/29/who-you-are/"/>
    <updated>2013-08-29T13:30:00+08:00</updated>
    <id>http://lieyunye.github.io/blog/2013/08/29/who-you-are</id>
    <content type="html"><![CDATA[<p>   裂云野是谁啊？
   <img src="http://lieyunye.github.io/images/dog.jpg"></p>
]]></content>
  </entry>
  
</feed>
